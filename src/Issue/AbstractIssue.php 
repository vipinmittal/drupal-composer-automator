<?php

namespace YourNamespace\DrupalComposerAutomator\Issue;

use Composer\Composer;
use Composer\IO\IOInterface;
use YourNamespace\DrupalComposerAutomator\Util\ConfigManager;

abstract class AbstractIssue implements IssueInterface
{
    protected $composer;
    protected $io;
    protected $config;
    protected $hasIssue = false;

    public function __construct(Composer $composer, IOInterface $io, ConfigManager $config)
    {
        $this->composer = $composer;
        $this->io = $io;
        $this->config = $config;
    }

    public function isApplicable(): bool
    {
        return true;
    }

    public function diagnose(): bool
    {
        // Implement in child classes
        return false;
    }

    public function canFix(): bool
    {
        return $this->hasIssue;
    }

    public function fix(): bool
    {
        // Implement in child classes
        return false;
    }

    public function needsPostCommandFix(): bool
    {
        return false;
    }

    public function postFix(): bool
    {
        // Implement in child classes
        return false;
    }

    protected function isDrupalProject(): bool
    {
        $packages = $this->composer->getRepositoryManager()->getLocalRepository()->getPackages();
        
        foreach ($packages as $package) {
            if ($package->getName() === 'drupal/core' || $package->getName() === 'drupal/core-recommended') {
                return true;
            }
        }
        
        return false;
    }
}